react 构建组件的方法：
1.React.createClass 
  兼容性最好，最传统
  const Button = react.createClass({
    getDefaultProps(){
      return{
        color:'blue',
        text:'Confirm',
      }
    }
    render(){
      <div></div>
    }
  })
  会被解析成React.createElement(Button)方法来创建 Button 实例，
2.ES6 classes
  import React,{Component} from 'react'
  class Button extends Component{

  }
  内部调用方法，变成用类来实现。与createClass 的结果相同的是，调用类实现的组件会创建实例对象

3.无状态函数
  Function Button({color = 'blue', text='Confire'}){
    return(
     <button />
    )
  }
  无状态组件只传入props 和context 二个参数，也就是，她不存在state,也没有生命周期的方法，
  避免内存分配，做好内部优化
组件生命周期：
组件挂载：
读取state+props中属性 componentWillMount => render => componentDidMount
如果在componentWillMount中执行setState方法，组件会更新state,但是只会渲染一次。
如果在componentDidMount中执行setState方法，组件会更新，会渲染二次
componentWillUnmount 清理一些方法，回收会清除定时器。

数据更新过程：
组件自生的 state,那么会一次执行shouldComponentUpdate => componentWillUpdate => render => componentDidUpdate
shouldComponentUpdate 他需要接受更新的props,state,让开发者增加必要的条件判断，让其在需要的时候更新。 该方法返回 false的时候，组件不会再向下执行生命周期
默认的情况下，shouldComponentUpdate默认返回true
不能再componentWillUpdate 中setState

如果组件是由父组件props更新的，componentWillReceiveProps => shouldComponentUpdate => componentWillUpdate => render => componentDidUpdate

DOM 真正被添加到HTML中生命周期方法是 componentDidMount 和 componentDidUpdate

refs:组件被调用时会创建一个组件的实例，而refs就会指向这个实例。

Virtual Dom 在内存中是以对象的形式存在的，如果想要在这些对象上添加事件，就会非常简单。
react基于Virtual DOM 实现了一个SynthticEvent(合成事件)层，我们所定义处理器会接受到一个SynthticEvent 对象的实例。
所以的合成事件都是绑在最外层，如果需要访问原生的事件，可以使用 nativeEvent
合成事件的实现机制：
事件委托、自动绑定
事件委托：
自动绑定：在react组件中，每个方法的上下文都会指向改组件的实例，即自动绑定this为当前组件。
手动绑定this:
  1.bind
    绑定事件处理器内的this并且向事件处理器中传递参数
  2.构造函数中生命
    在构造函数中完成this 的绑定
  3.箭头函数
    自动绑定this 
在react 中使用原生事件：
   在componentDidMount()中调用原生
   在组件卸载时候，手动移除，
受控组件：


<<<<<<< HEAD
=======
react 的原理
redux 
react-redux 是如何绑定的

>>>>>>> a90d0c8ed7689eac31522620770a9fb2398811d2
   
 JSX 防注入攻击
 React DOM 在渲染之前默认会 过滤所有传入的值，它可以确保你的应用不会被注入攻击，
 所有的内容在渲染之前都被转换成了字符串。这样可以有效的防止XSS（跨站脚本）攻击。

 React 元素都是不可变的，当元素被创建之后，你无法改变其内容或者属性，一个元素就好像是动画一样的，
 更新界面的唯一新的元素，然后传入ReactDOM.render()

组件 可以将UI切分成一些独立的，可复用的部分，这样你就只需要专注于构建每个组件

props 的只读性
无论是使用函数或是类来声明一个组件，它决不能修改它自己的props
所有的React组件必须像纯函数那样使用它们的props。

为一个类添加局部状态
1.在render() 方法中使用 this.state.date 替代 this.props.date
2.添加一个类构造函数来初始化状态 this.state
constructor(props) {
    super(props);
    this.state = {date: new Date()};
  }
3.setState()
  1.不要直接更新状态 
  2.状态更新可能是异步的
    react 可以将多个setState() 调用合并成一个来提高性能。
    this.setState((prevState, props) => ({
    counter: prevState.counter + props.increment
    }));
  3. 状态更新合并
     当你调用 setState() 时，React 将你提供的对象合并到当前状态。

 数据自顶向下流动

 在react 中另外一个不同的是你不能使用返回false 的方式组织默认行为，你必须使用preventDefault
 在react中  e是一个合成事件。你仅仅需要在这个元素初始渲染的时候提供一个监听器

 jsx 回调函数中this,类的方法默认是不会绑定this的，如果你忘记绑定this.handleClick() 并把它传入onClick ,
 当你调用这个函数的时候this的值是undefined

 组织组件渲染
 在极少数情况下，你可能希望隐藏组件，即使它被其他组件渲染。让 render 方法返回 null 而不是它的渲染结果即可实现
 组件的 render 方法返回 null 并不会影响该组件生命周期方法的回调。例如，componentWillUpdate 和 componentDidUpdate 依然可以被调用。

 index 作为key 值的确没什么问题 ，但是会导致重复渲染列表，影响性能 

React.createElement(component,props,...child)

使用Refs 
何时使用Refs
.处理交点，文本选择或媒体控制
.触发强制动画
.集成第三方DOM库
 Ref 转发使组件可以像暴露自己的 ref 一样暴露子组件的 ref。关于怎样对父组件暴露子组件的 DOM 节点，在 ref 转发文档 中有一个详细的例子。

React.createContext
const {Provider, consumer} = React.createContext(defaultValue);
创建一对{Provider，Consumer} 当React渲染context 组件Consumer 时，它将从组件树的上层最接近的匹配Provider读取当前的context值
如果上层的组件树没有一个匹配的 Provider，而此时你需要渲染一个 Consumer 组件，那么你可以用到 defaultValue 

Provider 
React 组件允许 Consumers 订阅 context 的改变。
接收一个 value 属性传递给 Provider 的后代 Consumers。
一个 Provider 可以联系到多个 Consumers。
Providers 可以被嵌套以覆盖组件树内更深层次的值。

Consumer
一个可以订阅 context 变化的 React 组件
<Consumer>
  {value => /* render something based on the context value */}
</Consumer>
接收一个 函数作为子节点.
 函数接收当前 context 的值并返回一个 React 节点。
 传递给函数的 value 将等于组件树中上层 context 的最近的 Provider 的 value 属性。
 如果 context 没有 Provider ，那么 value 参数将等于被传递给 createContext() 的 defaultValue 。
 每当 Provider 的值发生改变时，所有的 Consumers 都将会重新渲染。
 通过使用相同的算法如Object.is比较新旧值来确定变化。（这在传递对象作为 value 时会引发一些问题Caveats.）



