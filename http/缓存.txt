1.web 缓存
 => web 缓存是指一个web资源（如HTML，图片，js，数据）存在于服务器和客户端（浏览器）之间的副本
 => 缓存会根据进来的请求保存输出内容的副本
 =>当下一个请求来到的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求
2.web缓存的作用：
  1.减少网络宽带消耗
  2.降低服务器压力
  3.减少网络延迟，加快页面打开的速度
3.web 缓存的类型
  1.数据库数据缓存
  2.服务器缓存
     a.代理服务器缓存
       代理服务器是浏览器和源服务器之间的中间服务器，浏览器先向这个中间服务器发起Web请求，
       经过处理后（比如权限验证，缓存匹配等），再将请求转发到源服务器.
     b.CDN缓存
       网关缓存、反向代理缓存。
       CDN缓存一般是由网站管理员自己部署，为了让他们的网站更容易扩展并获得更好的性能。
  3.浏览器缓存
    浏览器缓存的规则是在HTTP协议头和HTML页面的Meta 标签中定义的。分别从新鲜度和校验值二个维度来规定浏览器是否可用。
    新鲜度：
        1.含有完整的过期控制信息（HTTP 协议报头），并且任然在有效期内
        2.浏览器已经使用过这个缓存的副本，并且在一个回话中检查过新鲜度
    校验值（Etag）:
    服务器返回资源的时候，在控制头信息中带上这个资源实体标签Etag,它会用来作为浏览器再次请求资源过程之中的校验标识。
 4.注意
   Expire的优先级  
   Last-Modified/ETag与Cache-Control/Expires
   配置Last-Modified/ETag的情况下，浏览器再次访问统一URI的资源，还是会发送请求到服务器询问文件是否已经修改，
   如果没有，服务器会只发送一个304回给浏览器，告诉浏览器直接从自己本地的缓存取数据；
   如果修改过那就整个数据重新发给浏览器          
   post 请求无法被缓存
   HTTP响应头中不包含Last-Modified/Etag，也不包含Cache-Control/Expires的请求无法被缓存


   form 表单提交的有关
formenctype 属性
formanctype属性 规定当把表单数据（form-data）提交至服务器时如何对其进行编码（method=post）
formmethod 属性定义用以向action URL 发送表单数据（form-data）的HTTP方法。formmethod 属性仅仅使用type='submit'以及type = ‘image’

localStorage 方法：（没有时间限制的数据存储）
localStorage方法存储的数据没有时间限制，需同域名才能访问得到，实例：
大小：5M
localStorage除非被清除，否则会永久保存

sessionStorage方法：
大小：5M
sessionStorage仅在当前会话下有效，关闭页面或浏览器后被清除


cookie:登录用户身份的数据来实现
大小：4kb
cookie在与服务器端通信每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题,
cookie 由服务器生成，用于标识用户身份
cookie:不能跨域
cookie 如果后端不设置Expire 和 max-age ，Cookie就是会话期间的，Cookie结束，Cookie就回被清除。如果设置了Expire 和 max-age  Cookie 就是持久的
服务器端通过set-cookie 响应头向用户代理发送Cookie信息。提示客户端要存储 cookie
标记secure 和 httpOnly 的标记，Cookie 不能被js 访问，设置httpOnly 其实是通过 http resoponse header 到浏览器中

在 head 中使用 阻塞 的js ,这回严重 拖慢页面的渲染速度
现在浏览器会使用 async  和 defer 来提供货异步加载的



cache manifest基础

浏览器缓存机制流程
1.首次加载网络页面
  浏览器请求 
  => 无缓存 
  => 向web服务器请求 
  => 请求响应，协商缓存  1.是否缓存Expires,Cache-control
  => 呈现              2.缓存时间
                      3.Etag
                      4.last-Modified
2.再次加载网络页面内容
  浏览器请求 ---> 有缓存 ---> 是否过期？--是-> Etag是否变化 ? --是-> 向web服务器请求  ------------------->|
                            |               |                  带if-none-match                    |
                            |               |                                              | -->服务器决策---> 200 or 304?
                            |               |                                              |                  200 ---> 请求响应，协商缓存-->呈现
                            |               --否->last-Modified? --是-> 向web服务器请求带---->|                  304 ---> 从缓存读取---> 呈现
                            |                           |              if-Modified-since
                            |                           |
                            |                           --否->向web服务器请求-->请求相应，---> 呈现
                            |                                                 协商缓存
                            |
                            |
                            |
                             --否-> 从缓存中读取 -->呈现
If-Modified-Since：记录页面最后修改时间的 HTTP 头信息 （客户端往服务器发送的头 ）
Last-Modified： 记录页面最后修改时间的 HTTP 头信息（ 由服务器往客户端发送的 HTTP 头  ）                               
Etag是一个可以与web 资源关联的记号（token）
ETags和If-None-Match的工作原理是在HTTP Response中添加ETags信息。
Last-Modified:次文档在服务器最后修改的时间
If-Modified-Since:浏览器会向服务器传送If-Modified-Since报头，询问改时间之后文件是否被修改过；

缓存的分类：
数据库缓存 代理服务器缓存

共享关系：
同源策略 => 要求后端请求的资源源于同一个域名下面
跨域共享资源：
CORS：cross-origin-resource
sharing:
Access-control-Allow-credentials
Access-control-Allow-methods
Access-control-Allow-origin
http 请求
1.open(methods,url,async(option),user(option),password(option))
2.send
3.onreadyStateChange
4.onreadyState(0 未发送，1 已发送,2 接受请求,3 ,4 完成)
5.State(http 状态吗)
6.responseText
var myXMLHttpRequest = new XMLHttpRequest();
var url = ''
myXMLHttpRequest.onreadyStateChange = function(){
  if(onreadyState === 4 & myXMLHttpRequest.state ===2){

  }
}
JSONP
1.利用动态生成script标签来解决
2.var script = docuememt.creatElelment('script');
script.type = 'text/js'
script.src = 'url'
docuememt.getElementByTagName('head'[0]).appendChild('script');
服务器 也要对JSONP 有一定的支持，通常在URL加入queryString的callback 告诉后端函数的名字 jsonp?callback(getXXX())

与缓存相关的HTTP首部字段主要有哪些？

这些HTTP首部字段之间的联系与区别？

HTTP缓存首部字段的优先级？

HTTP缓存首部字段的特点与局限性？

用户不同的页面刷新行为的差别？

在实践中我们该用哪些报文头来控制缓存呢？