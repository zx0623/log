1.position:static absolute fixed center page sticky
static:默认值，对象遵循常规文档流，此时4个定位
relative：对象遵循常规流，并且参照自身在常规流中的位置通过top,right,bottom,left这4个定位偏移属性进行偏移时不会影响常规流中的任何位置
absolute：对象脱离常规流，此时偏移属性参照的是自身最近的定位祖先元素，如果没有定位的祖先元素，则一直回溯到body 元素。
          盒子的偏移位置不影响常规文档流中的任何元素，其margin不与其他任何margin 折叠
fixed: 与absolute一致，但偏移定位是以窗口为参考，当出现滚动的时候，对象不会随着滚动。

当position的值是非static，其层叠级别通过z-index 属性定义。 

2.z-index 适用于定位元素，即position为非static

3. clear: 作用于块级元素
    overflow:hidden
    

4.float 会影响元素的堆叠顺序

5.visibility:visible hidden collapse 
  只是看不见，但是在文档中位置还在

6.overflow适用于 块级盒子，伸缩性容器，grid盒子
  无继承性
  如果overflow 不是定位元素，同时绝对定位元素和overflow容器之间也没有定位元素，则overflow无法对absolute元素进行剪 
  visible:对溢出内容不做处理，内容可能会超出容器
  hidden:隐藏溢出容器的内容且不出现滚动条
  scroll:隐藏溢出容器的内容，溢出的内容将以卷动滚动条的方式呈现
  auto:当内容没有溢出容器时不出现滚动条，当内容溢出容器时出现滚动条，按需出现滚动条。此为body对象，和textarea

7.margin （百分比 是按照width来计算）
  某些相邻的margin会发生合并，我们称之为margin折叠
  1.margin 折叠只会发生在块级元素上
  2.浮动元素不与任何margin发生折叠 （BFC）
  3.设置overflow且值不为visible的块级元素，将不与它的子元素发生margin折叠 （BFC）
  4.绝对定位元素的margin不与任何margin发生折叠 （BFC）
  5.根元素margin不与其它任何margin发生折叠 （BFC）

8.padding margin (百分比 是按照width 来计算)

9.background 复核属性，检索或者设置对象的背景图
  一个元素可以设置多重背景图像，每组属性间使用逗号
  多重背景图之间存在交集，前面的背景图会覆盖在后面的图片上
  background-attachment: fixed => 背景图像相对于窗体固定
                         sccroll => 背景图像相对于元素固定，
                                    也就是说当元素内容滚动时背景图像不会跟着滚动，因为背景图像总是要跟着元素本身。但会随元素的祖先元素或窗体一起滚动。
  background-origin: 
                 border-box => 从padding区域（含padding）开始显示背景图像
                 paddding-box => 从border区域（含border）开始显示背景图像
                 content-box => 从content区域开始显示背景图像。
  background-clip:
                padding-box：从padding区域（不含padding）开始向外裁剪背景
                border-box：从border区域（不含border）开始向外裁剪背景 
                content-box：从content区域开始向外裁剪背景 
                text:从前景内容的形状（比如文字）作为裁剪区域向外裁剪，如此即可实现使用背景作为填充色之类的遮罩效果 
 background-size:
               length: 用长度值指定背景图像大小，不允许负值
               percentage:  百分比指定背景图像大小
               auto:背景图像的真是大小
               cover:将背景图像等比缩放到完全覆盖容器，背景图像有可能超出容器。
               contain:将背景图像等比例缩放到宽度与容器或者高度相等，背景图像始终包含在容器内。

10.元素定义opacity，将会产生局部层叠上下文。

11.word-braek: 设置或检索对象内文本的字内换行行为
            normal:允许在字内换行
            keep-all:不允许字断开
            break-all:任意字内断开
  word-wrap: 设置或检索当内容超过指定容器的边界时是否断行
           normal:允许内容顶开或溢出指定的容器边界
           break-word:内容将在边界内换行。如果需要，单词内部允许断行 
  overflow-wrap:设置或检索当内容超过指定容器的边界时是否断行 
           normal：允许内容顶开或溢出指定的容器边界。
           break-word：内容将在边界内换行。如果需要，单词内部允许断行。               
 word-spacing: 检索或设置对象中的单词之间的最小，最大和最佳间隙。
 letter-spacing: 检索或设置对象中的字符之间的最小，最大和最佳间隙。
 text-indent:检索或设置对象中的文本的缩进。
     重点 =>适用于：块容器
         => 内联对象要使用该属性必须先使该对象表现为块级或内联块级
 vertical-align: 设置或检索内联元素在行框内的垂直对其方式。      
 line-height: 所有的元素都可以的 => 检索或设置对象的行高。即字体最底端与字体内部顶端之间的距离
      normal：允许内容顶开或溢出指定的容器边界。
      length:
      percentage:用百分比指定行高，其百分比取值是基于字体的高度尺寸。不允许负值

12.direction => 检索或设置文本流的方向
         ltr => 文本流从左到右
         rtl => 文本从右到左
   writing-mode: 设置或检索对象的内容块固有的书写方向
13.text-overflow:
        clip => 当内联内容溢出块容器时，将溢出部分裁切掉
        ellipsis =>  当内联内容溢出块容器时，将溢出部分替换为（...）
14.box-sizing:content-box => padding和border不被包含在定义的width和height之内 Element width = width + border + padding
              border-box => padding和border被包含在定义的width和height之内  Element width = width
15.align-self => 定义flex子项单独在侧轴（纵轴）方向上的对齐方式
   auto
   flex-start
   flex-end
   center
   baseline
   stretch  
16.
transform:
         translate:平移
         rotate：旋转
         scale:缩放
         skew：斜切扭曲
transform-origin：设置或检索对象以某个原点进行转换
transform-style：
              flat：指定子元素位于此元素所在平面内
              preserve-3d ：子元素定位在三维空间内
perspective: 指定观察者与「z=0」平面的距离，使具有三维位置变换的元素产生透视效果。
            「z>0」的三维元素比正常大，
             而「z<0」时则比正常小，大小程度由该属性的值决定。 
transition: 检索或设置对象变换时的过渡
<' transition-property '>：检索或设置对象中的参与过渡的属性
<' transition-duration '>：检索或设置对象过渡的持续时间
<' transition-timing-function '>：检索或设置对象中过渡的动画类型
<' transition-delay '>：检索或设置对象延迟过渡的时间                                   
animation 复合属性。检索或设置对象所应用的动画特效
<' animation-name '>：检索或设置对象所应用的动画名称
<' animation-duration '>：检索或设置对象动画的持续时间
<' animation-timing-function '>：检索或设置对象动画的过渡类型
<' animation-delay '>：检索或设置对象动画延迟的时间
<' animation-iteration-count '>检索或设置对象动画的循环次数
<' animation-direction '>：检索或设置对象动画在循环中是否反向运动
<' animation-fill-mode '>：检索或设置对象动画时间之外的状态

17.grid 布局
   圣杯布局 是包括页眉、页脚、和一个包含二个左右边栏的主内容区的网页布局。
   规则：
   有固定宽度侧边栏和自适应主内容区域
   中间一列应该在标记中最先出现，早于两个侧边栏(但在页眉后)
   不管三列中包含的是什么，都应该具有相同的高度
   页脚应该总是处于浏览器视窗的底部，即使内容不能填满视区高度
   布局应该是响应的，在小视窗中所有的部分应该在一列中显示
   使用grid 布局
   <body class="hg"> 
     <header class="hg__header">Title</header> 
     <main class="hg__main">Content</main> 
     <aside class="hg__left">Menu</aside> 
     <aside class="hg__right">Ads</aside> 
     <footer class="hg__footer">Footer</footer> 
   </body> 
   .hg__header { grid-area: header; } 
   .hg__footer { grid-area: footer; } 
   .hg__main { grid-area: main; } 
   .hg__left { grid-area: navigation; } 
   .hg__right { grid-area: ads; } 
   .hg { 
     display: grid; 
     grid-template-areas: "header header header" 
                          "navigation main ads" 
                          "footer footer footer";
     grid-template-columns: 150px 1fr 150px; 
     grid-template-rows: 100px 1fr 30px; 
     min-height: 100vh; 
     }
      @media screen and (max-width: 600px) { 
        .hg { 
          grid-template-areas: "header" "navigation" "main" "ads" "footer";
           grid-template-columns: 100%; 
           grid-template-rows: 100px 50px 1fr 50px 30px; 
           }
     fr => 表示网格中剩余的全部空间
     grid-area 创建网格是我们可以引用他们的别名
     grid-template-areas 指定网格的布局
     grid-template-columns 定义列的宽度
     grid-template-rows 定义行的高度
18.圣杯布局 和比翼双飞布局
   <div class='container'>
    <div class='main'>main</div>
    <div class='left'>left</div>
    <div class='right'>right</div>
   </div>
   1.实现方法1
    .left,
    .middle,
    .right{ 
        position: relative;
        float: left;
        min-height: 130px;
    }
    .container{
        padding:0 220px 0 200px;
        overflow: hidden;
    }
    .left{
        margin-left: -100%;
        left: -200px;
        width: 200px;
        background: red;
    }
    .right{
        margin-left: -220px;
        right: -220px;
        width: 220px;
        background: green;
    }
    .middle{ 
        width: 100%;
        background: blue;
        word-break: break-all;
    }
