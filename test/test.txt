1.取整
parseInt()
判断是不是整数
2.网页性能优化
  1.请减少HTTP请求
    合并图片（css sprites），合并CSS和JS文件；
    图片较多的页面也可以使用 lazyLoad 等技术进行优化。
  2.尽可能限制Reflow的影响范围
  3.使用CDN加速    
3.URL网址输入到加载的过程
DNS解析
TCP连接
发送HTTP请求
服务器处理请求并返回HTTP报文
浏览器解析渲染页面
连接结束

4.DNS
  DNS域名解析

5.变量提升
因为变量申明是在任意代码执行前处理的，在代码区中任意地方申明变量和在最开始（最上面）的地方申明是一样的。
也就是说，看起来一个变量可以在申明之前被使用！这种行为就是所谓的“hoisting”，
也就是变量提升，看起来就像变量的申明被自动移动到了函数或全局代码的最顶上。
6.判断是否为整数
7.for in 和 Object.keys 区别
  for in 列举所以可枚举的属性，包括原型链上的属性
  Object.keys 返回keys 组成的数组

8.pwa
9.用链表实现队列
10.手写一个 EventEmitter
11.cdn
12.webpack打包
13.css 实现一个二栏布局，一侧固定 ，一侧填充剩余空间
   1.flex
   2.float+margin
   3.float+overflow:hiddle
   4.calc() 计算属性
14.手写一个 Linux 路径访问器
// /a/b/../c/./d => /a/c/d
  function toTargetUrl(url) {
    var _url = url;
    if (!_url) return url;
    var urlArr = _url.split('/');
    var targetUrl = [];
    urlArr.forEach((ele, index, arr) => {
      if (ele === '..') {
        targetUrl.pop()
      } else {
        if (ele !== '.') {
          targetUrl.push(ele)
        }
      }
    })
    return targetUrl.join('/');
  }
  console.log(toTargetUrl('/a/b/../c/./d'));
15.Node Event Loop 六个阶段

16.隐身转换

17.实现 bind

18.节流 抖动

19.框架

20.浏览器网络 
   HTTP2 相比较 HTTP1.1 有什么优点（多路复用，server pushh  g
   更安全）
21.算法
   二分查找
   简单排序
   从一个无序，不相等的数组中，选取N个数，使其和为M
   阶乘
   // 阶乘 -递归和尾递归调用 n*n-1
      function factoria(n) {
        if (n = 1) return n;
        return n * factoria(n - 1);
      }
      递归：程序自身调用自身为递归调用
      特点：1.子问题必须与原始问题相同的事情，切更为简单
           2.不能无线调用自身，必须要有出口
      递归优化 --尾递归
           1. 因为函数执行会创建函数的上下文，并压入大执行上下文中，结束后会弹出，递归是不断的压入，耗性能
             才有尾递归：函数内部最后一个动作才是递归调用，该函数的返回值直接给调用函数。



题目作答：      

用链表实现队列
function Node(ele){
  this.node = ele;
  this.next = undefined;
}
function LinkedList(){
  var head = new Node('head');
  var length = 1;
  this.pushNode = function(ele){
    var node = new Node(ele);
    var current;
    current = head;
    while(current.next){
    current = current.next;
    }
    current.next = node;
    length++;
    console.log(head);
  }
 this.shiftNode = function(){
   var _head = head;
   if(_head.next){
     head = _head.next;
     length--;
   }else{
     //删掉了所以
     head = {};
     length = 0;
   }
   console.log(head);
 }
}
核心部分1：
分析：链表的最终是head
     增加也是增加head,
     添加的关键
      var current;
     current = head;
    while(current.next){
    current = current.next;
    }
    current.next = node;

手写一个 EventEmitter
var emit = (function() {
    var _message = {};
    return {
      on: function(type, fn) {
        if (!_message[type]) {
          _message[type] = [fn];
        } else {
          _message[type].push(fn);
        }
      },
      trriger: function(type, args) {
        if (!_message[type]) return
        for (var i = _message[type].length - 1; i >= 0; i--) {
          _message[type][i].call(this, args);
        }
      },
      off: function(type, fn) {
        if (_message[type] && Array.isArray(_message[type])) {
          for (var i = 0; i <= _message[type].length; i++) {
            if (_message[type][i] === fn) {
              _message[type].splice(i, 1)
            }
          }
        }
      },
    }
  })();
  emit.on('test', function(args) {
    console.log(args.message);
  })
  emit.trriger('test', {
    message: 'hahahahah'
  });

 //bind 实现 
 1.传入一个函数
 2.可以传入参数
 //   1.传出一个函数
  //  2.可以传出的函数也可以传入参数
  //  apply 方法传入两个参数：一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组
  //  call 方法第一个参数也是作为函数上下文的对象，但是后面传入的是一个参数列表，而不是单个数组。
  Function.prototype.bind2 = function(context) {
    var self = this;
    // 取bind2函数从第二个参数到最后一个参数
    var args = Array.prototype.slice.call(arguments, 1);
    return function() {
      var bindArgs = Array.prototype.slice.call(arguments);
      self.apply(context, args.concat(bindArgs))
    }
  }
  主要记住：apply 参数是数组
          bind 的参数 Array.prototype.slice.call(arguments);

抖动函数
function debounce(fn,delay){
  var timeout;
  return function(){
    clearTimeout(timeout);
    var self = this,
        args = arguments;
    timeout = setTimeout(function(){
      fn.call(self,args);
    },delay)    
  } 
}
节流函数

  function throttle(fn, during) {
    var timeout;
    var start = new Date();
    return function() {
      var self = this,
        args = arguments,
        curr = new Date();
      clearTimeout(timeout); //总是要清除事件的计时器
      if (curr - start >= during) {
        fn.call(self, args);
        start = curr;
        // 只执行一部分的方法，这些方法在某些事件段内只执行一次
        // 执行后重置开始时间
      } else {
        // 让方法在没达到时间里也执行一次
        timeout = setTimeout(function() {
          fn.call(self, args);
        }, during)
      }
    }
  }

快速排序法
function qucSort(arr){
  if(arr.length <=1) return arr;
  var middleIndex = Math.floor(arr.length/2);
  var middleItem = arr.splice(middleIndex,1);
  var left =[];
  var right = [];
  for(var i=0;i<arr.length;i++){
    if(arr[i] >= middleItem){
      right.push(arr[i]);
    }else{
      left.push(arr[i]);
    }
  }
 return qucSort(left).concat(middleItem,qucSort(right));
}

// 冒泡排序
function bubberSort(arr){
  if(arr.length <=1) return arr;
  for(var i=0;i<arr.length-1;i++){
    for(var j=0;j<arr.legth-1;j++){
      if(arr[j] >arr[j+1]){
        var swap = arr[j];
        arr[j] =arr[j+1];
        arr[j+1] = swap;
      }
    }
  }
  return arr;
}


  // 二分查找(数组必须是已经升排列好的) 递归写法
  function twoSeach(array, item, start, end) {
    var start = start || 0;
    var end = end || array.length - 1;
    var middleIndex = Math.floor((start + end) / 2);
    if (array[middleIndex] === item) {
      return middleIndex;
    } else if (array[middleIndex] > item) {
      twoSeach(array, item, start, middleIndex - 1);
    } else {
      twoSeach(array, item, middleIndex + 1, end);
    }
    return false;
  }
  // 二分查找(数组必须是已经升排列好的) 递归写法
  function twoSearch(data, item, start, end) {