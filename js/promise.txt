Promise 标准的解读
1.只有一个then方法，没有catch，race, all 方法
2.the= n方法返回一个Promise
3.不同的promise 的需要实现可以相互调用
4.Promise的初始状态为pending,pending  => fulfilled, pending => resolved

function Promise(){
  
}

js 总结for of 和 for in 的区别？
1.推荐循环对象属性的时候，使用for...in ，在遍历数组的时候，使用for...of
2.for ... in 循环遍历出来的是key,for ... of 循环出来的value，
3.for ... of 不能循环遍历出普通的对象，需要和Object.keys() 
4.for ... in  会遍历出构造函数  原型的属性，
  Object.keys() 返回 一个数组，而且不会拿到原型上的方法，只会拿到实例中的对象
var arr = [1,2,3,4,5];
arr.foo = '123';

for(var i = 0;i<arr.length;i++){
    console.log(arr[i]); // 1,2,3,4,5
}
for(var value in arr){
    console.log(value); // 0,1,2,3,4,foo
}

for(var key of arr){
    console.log(key) // 1,2,3,4,5
}

function A(a,b,c){
    this.a = a;
    this.b = b;
    this.c = c;
}
A.prototype.foo = function(){console.log(this.a)}

var a = new A(1,2,3);
for(var key in a){
    console.log(key); a,b,c,foo
}
console.log(Object.keys(a)); a,b,c

var promise  = new Promise((resolve,reject)=>{
  throw new Error('234');
})
promise
.then(function(value){console.log(value)})
.catch(function(error){console.log('error:'+error);
 return new Promise((resolve,reject)=>{resolve('234')})
}).then(function(value){
  console.log('捕获错误任然执行:'+value)
})
迭代器
迭代器是一种特殊的对象，它具有以下专门为迭代过程设计的专有接口，所以的迭代器对象都要一个next()方法。
每次调用都会返回一个对象结果，结果对象有二个属性，一个是value，表示下一个将要返回的值；
另外一个是done,它是返回一个布尔值每当没有更多的值可返回的时候返回true。
迭代器还会返回一个内部指针，用来指向当前集合的中为位置，用来指向当前集合中值的位置
，每调用一次next()方法，都会返回下一个可用的值。

function createIterate(arr){
    var i = 0; // 内部的指针
    return {
        next:function(){
        var done = i>= arr.length;
        var value = !done ?  arr[i++] :undefined; // 下一个将要返回的值
        return {
            done:done,
            value: value,
        }
        }
    }

}

var itera = createIterate([1,2,3,4,5]);
console.log(itera);
console.log(itera.next());

console.log(itera.next());

console.log(itera.next());

console.log(itera.next());
console.log(itera.next());
console.log(itera.next());
console.log(itera.next());

生成器
生成器函数最有趣的部分是，每当执行完一条yield语句后函数就会自动停止执行。
举个例子，在上面这段代码中，执行完语句yield 1之后，函数便不再执行其他任何语句，
直到再次调用迭代器的next()方法才会继续执行yield 2语句,拿到那个yiled的值

async 函数返回一个promise 对象，
async 函数内部 return 语句返回的值，会成为then 方法回调函数的参数。
async function f() {
  return await 123;
}

f().then(v => console.log(v))

await命令后面的 Promise 对象如果变为reject状态，
则reject的参数会被catch方法的回调函数接收到
async function f() {
  await Promise.reject('出错了');
}

f()
.then(v => console.log(v))
.catch(e => console.log(e))


async 是对Generator函数的改进，
1.内置执行器
Generator 函数的执行必须依靠执行器，所以才有了co 模块。async 自带执行器
2.更好的语义
3.返回的值是 promise 

async 返回一个Promise 对象，可以使用then 方法添加回调函数，
当函数执行的时候，一旦遇到awiat就会立即先返回，等到异步操作完成后，在接着执行函数体后面的语句。

async 难点是错误的处理
async 函数返回是一个Promise的对象，
async 函数内部return 语句返回值，会成为then 方法语句返回的值，
async function f() {
  return 'hello world';
}

f().then(v => console.log(v))

只要一个await语句后面的 Promise 变为reject，那么整个async函数都会中断执行。

有时，我们希望即使前一个异步操作失败，也不要中断后面的异步操作。
这时可以将第一个await放在try...catch结构里面，这样不管这个异步操作是否成功，
第二个await都会执行。
async function f() {
  try {
    await Promise.reject('出错了');
  } catch(e) {
  }
  return await Promise.resolve('hello world');
}

f()
.then(v => console.log(v))

使用注意点：
第一点，前面已经说过，await命令后面的Promise对象，
运行结果可能是rejected，所以最好把await命令放在try...catch代码块中。

第二点，多个await命令后面的异步操作，如果不存在继发关系，最好让它们同时触发。

第三点，await命令只能用在async函数之中，如果用在普通函数，就会报错

Map js的基本对象（object），本质上是键值对的集合（Hash 结构）
const m = new Map();
const o = {p: 'Hello World'};

m.set(o, 'content')
m.get(o) // "content"

m.has(o) // true
m.delete(o) // true
m.has(o) 

const map = new Map([
  ['name', '张三'],
  ['title', 'Author']
]);

var map1 = new Map([
[1, '1'],
[2,'2'],
[3,'3']
]);
map1;

post 和 get 的区别：
1.post 比较安全，请求参数是放在 request body 中的，而get的请求参数，是放在 请求连接中的，不安全，其大小与限制，大小限制是2kb
2.对于参数的类型，GET只接受ASCII字符，而post没有限制
3.GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留
4.GET请求只能进行url编码，而POST支持多种编码方式
5.GET在浏览器回退时是无害的，而POST会再次提交请求

